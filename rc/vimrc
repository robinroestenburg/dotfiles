" Use Vim settings, rather than Vi settings (much better!). This must be first,
" because it changes other options as a side effect.
set nocompatible


" Check whether Vundle needs to be installed. If so, install :)
let needsToInstallBundles=0
if !isdirectory(expand("~/.vim/bundle/vundle"))
  echo "\nInstalling Vim dependencies... Please be patient!\n"
  silent !mkdir -p ~/.vim/tmp
  silent !mkdir -p ~/.vim/swap
  silent !mkdir -p ~/.vim/undo
  silent !mkdir -p ~/.vim/bundle
  silent !mkfifo ~/.vim/commands-fifo
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let needsToInstallBundles=1
endif

" Setup Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Bundle 'scrooloose/syntastic'
" Bundle 'tpope/vim-fugitive'

" Colorschemes
Bundle 'vim-scripts/tir_black'
Bundle 'vim-scripts/wombat256.vim'

" Syntax & Language support
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-markdown'
Bundle 'slim-template/vim-slim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'kchmck/vim-coffee-script'
Bundle 'othree/html5-syntax.vim'

" Other
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-rails'
Bundle 'vim-scripts/netrw.vim'
Bundle 'godlygeek/tabular'
Bundle 'mileszs/ack.vim'
Bundle 'wincent/Command-T'


if needsToInstallBundles == 1
  echo "\nInstalling Bundles, please ignore key map error messages\n"
  :BundleInstall!
  echo "\nInstalled.\n"
endif


" Make backspace behave in a sane manner.
set backspace=indent,eol,start

" Switch syntax highlighting on
syntax on

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Turn backup off, since most stuff is in version control anyway. Gets rid of
" the annoying errors when re-opening the same file.
set nobackup
set nowb
set noswapfile

" When a file has been detected to have been changed outside of Vim and it has
" not been changed inside of Vim, automatically read it again.
set autoread

" Set the current shell to bash, because zsh does not use the correct Ruby
" version.
set shell=bash

"
" Key mappings
"

let mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>
" Fast quiting
nmap <leader>q :q<cr>

" " Fast editing of the .vimrc
" nmap <leader>e :e! ~/.vimrc<cr>

" " When vimrc is edited, reload it
" autocmd! bufwritepost vimrc source ~/.vimrc

" Smart way to move around in windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
" TODO: Was not working, look for new ones.

" Turn off arrow keys in normal mode.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Turn off arrow keys in insert mode.
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Turn off arrow keys in visual mode.
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

" Pressing j or k in a long wrapped will put cursor down/up one visual line.
nnoremap j gj
nnoremap k gk

" Turn off F1
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Pressing only the leader key will turn off the highlighting.
map <silent> <leader><cr> :noh<cr>

" Moving lines up and down in normal, insert and visual mode
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" Shortcuts for using Tabularize, see:
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a. :Tabularize /=><CR>
vmap <leader>a. :Tabularize /=><CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>

" Command-T shortcuts
nmap <leader>t  :CommandTFlush<CR>\|:CommandT<CR>
nmap <leader>T  :CommandTFlush<CR>\|:CommandT %%<CR>
nmap <leader>b  :CommandTBuffer<CR>
nmap <leader>gc :CommandTFlush<CR>\|:CommandT app/controllers<CR>
nmap <leader>gh :CommandTFlush<CR>\|:CommandT app/helpers<CR>
nmap <leader>gm :CommandTFlush<CR>\|:CommandT app/models<CR>
nmap <leader>gv :CommandTFlush<CR>\|:CommandT app/views<CR>
nmap <leader>ga :CommandTFlush<CR>\|:CommandT app/stylesheets<CR>
nmap <leader>gl :CommandTFlush<CR>\|:CommandT lib<CR>
nmap <leader>gp :CommandTFlush<CR>\|:CommandT public<CR>
nmap <leader>gf :CommandTFlush<CR>\|:CommandT features<CR>
nmap <leader>gs :CommandTFlush<CR>\|:CommandT spec<CR>

" Shortcuts for running RSpec, Cucumber and Test::Unit test.
" TODO: Use better mappings ;)
nmap <leader>r :call RunTestFile()<cr>
nmap <leader>R :call RunNearestTest()<cr>
nmap <leader>a :call RunTests('')<cr>
nmap <leader>f :w\|:!script/features<cr>
nmap <leader>fw :w\|:!script/features --profile wip<cr>

" Since syntastic was added, :E has an ambiguous mapping.
" This reverts the old behaviour of starting Netrw.
cnoreabbrev E Explore

" Toggle the 'paste' option On/Off. When the 'paste' option is enabled, Vim
" turns off all Insert mode mappings and abbreviations and resets a host of
" options, including 'autoindent'.
set pastetoggle=<f5>

"
" Statusbar
"

" Show (partial) command in the last line of the screen.
set showcmd

" If in Insert, Replace or Visual mode put a message on the last line.
set showmode

" Always show a status line.
set laststatus=2

" Show the line and column number of the cursor position, separated by a comma.
set ruler

"
" Indentation settings
"

" Copy indent from current line when starting a new line
set autoindent

" In Insert mode: Use the appropriate number of spaces to insert a <Tab>.
set expandtab

" Use 2 spaces for each step of (auto)indent.
set shiftwidth=2

" set cindent

" Do smart autoindenting when starting a new line.
" set smartindent

set smarttab

" Number of spaces that a <Tab> counts for while performing editing operations
set softtabstop=2

" Number of spaces that a <Tab> in the file counts for.
set tabstop=2

"
" Command-T
"

" Normally Command-T will not recurse into "dot-directories" (directories whose
" names begin with a dot) while performing its initial scan. Set this setting to
" a non-zero value to override this behavior and recurse.
let g:CommandTScanDotDirectories = 1

" When showing the file listing Command-T will by default show dot-files only if
" the entered search string contains a dot that could cause a dot-file to match.
" When set to a non-zero value, this setting instructs Command-T to always
" include matching dot-files in the match list regardless of whether the search
" string contains a dot.
let g:CommandTAlwaysShowDotFiles = 1

" A list of file patterns.  A file that matches with one of these patterns is
" ignored when completing file or directory names, and influences the result of
" |expand()|, |glob()| and |globpath()| unless a flag is passed to disable this.
set wildignore+=.vim/bundle/**,.git,generated/**,.sass-cache/**,tmp/**,.jhw-cache/**,build/**,node_modules/**,coverage/**

"
" Display settings
"

" Don't redraw during macro execution
set lazyredraw

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=2048

set number
set numberwidth=5 " Enough room to fit 3-digit lines.

"	Highlight column 80 of each line.
set textwidth=80
set colorcolumn=+1
set nowrap
set linebreak

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=5


" Highlight the screen line of the cursor.
set cursorline

" Use a dark background.
" set background=light

colorscheme wombat256mod

" Highlight space errors.
" By default, the "end" keyword is colorized according to the opening statement
" of the block it closes.  While useful, this feature can be expensive; if you
" experience slow redrawing (or you are on a terminal with poor color support)
" you may want to turn it off by defining the "ruby_no_expensive" variable:
let ruby_no_expensive = 1

" Ruby operators can be highlighted. This is enabled by defining ruby_operators:
let ruby_operators = 1

" Whitespace errors can be highlighted by defining "ruby_space_errors":
let ruby_space_errors = 1

" Show leading whitespace that includes spaces, and trailing whitespace.
:highlight ExtraWhitespace ctermbg=red guibg=red
:autocmd BufWinEnter * match ExtraWhitespace /\s\+$/

"
" Search settings
"

" Ignore case when searching
set ignorecase
set smartcase

" When there is a previous search pattern, highlight all its matches.
set hlsearch

" While typing a search command, show where the pattern, as it was typed so far,
" matches.  The matched string is highlighted.  If the pattern is invalid or not
" found, nothing is shown.
set incsearch

"
" Functions for running tests from different frameworks in Ruby.
"

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w

  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo

  if match(a:filename, '\.feature$') != -1
    exec ":!cucumber -r features " . a:filename
  elseif match(a:filename, '_spec\.rb$') != -1
    exec ":!rspec " . a:filename
  else
    :echo a:filename
  end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|spec.js\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction
